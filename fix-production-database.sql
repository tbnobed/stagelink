-- Virtual Audience Platform v2.0 Production Database Fix
-- This script fixes existing Docker production databases that are missing v2.0 schema

-- Create missing enum types if they don't exist
DO $$ BEGIN
    CREATE TYPE user_role AS ENUM ('admin', 'engineer', 'user');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE message_type AS ENUM ('individual', 'broadcast', 'system');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create session table for authentication if missing
CREATE TABLE IF NOT EXISTS "session" (
        "sid" varchar PRIMARY KEY NOT NULL,
        "sess" jsonb NOT NULL,
        "expire" timestamp NOT NULL
);

-- Create chat system tables if missing
CREATE TABLE IF NOT EXISTS "chat_messages" (
        "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        "session_id" text NOT NULL,
        "sender_id" integer REFERENCES "users"("id"),
        "sender_name" text NOT NULL,
        "recipient_id" integer REFERENCES "users"("id"),
        "message_type" message_type DEFAULT 'individual' NOT NULL,
        "content" text NOT NULL,
        "created_at" timestamp DEFAULT now() NOT NULL
);

CREATE TABLE IF NOT EXISTS "chat_participants" (
        "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        "session_id" text NOT NULL,
        "user_id" integer REFERENCES "users"("id"),
        "username" text NOT NULL,
        "role" user_role NOT NULL,
        "is_online" boolean DEFAULT true NOT NULL,
        "joined_at" timestamp DEFAULT now() NOT NULL,
        "last_seen_at" timestamp DEFAULT now() NOT NULL
);

-- Create session tokens table if missing
CREATE TABLE IF NOT EXISTS "session_tokens" (
        "id" text PRIMARY KEY NOT NULL,
        "link_id" text,
        "link_type" text,
        "created_at" timestamp DEFAULT now() NOT NULL,
        "expires_at" timestamp NOT NULL,
        "created_by" integer REFERENCES "users"("id")
);

-- Create viewer links table if missing
CREATE TABLE IF NOT EXISTS "viewer_links" (
        "id" text PRIMARY KEY NOT NULL,
        "return_feed" text NOT NULL,
        "chat_enabled" boolean DEFAULT false NOT NULL,
        "url" text NOT NULL,
        "session_token" text UNIQUE,
        "created_at" timestamp DEFAULT now() NOT NULL,
        "expires_at" timestamp,
        "created_by" integer REFERENCES "users"("id")
);

-- Create short viewer links table if missing
CREATE TABLE IF NOT EXISTS "short_viewer_links" (
        "id" text PRIMARY KEY NOT NULL,
        "return_feed" text NOT NULL,
        "chat_enabled" boolean DEFAULT false NOT NULL,
        "session_token" text UNIQUE,
        "created_at" timestamp DEFAULT now() NOT NULL,
        "expires_at" timestamp,
        "created_by" integer REFERENCES "users"("id")
);

-- Add missing columns to existing tables
DO $$ BEGIN
    -- Add session_token to generated_links if missing
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='generated_links' AND column_name='session_token') THEN
        ALTER TABLE "generated_links" ADD COLUMN "session_token" text UNIQUE;
    END IF;
    
    -- Add session_token to short_links if missing
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='short_links' AND column_name='session_token') THEN
        ALTER TABLE "short_links" ADD COLUMN "session_token" text UNIQUE;
    END IF;
    
    -- Add updated_at to users if missing
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='updated_at') THEN
        ALTER TABLE "users" ADD COLUMN "updated_at" timestamp DEFAULT now() NOT NULL;
    END IF;
END $$;

-- Create all required indexes
CREATE INDEX IF NOT EXISTS "IDX_session_expire" ON "session" ("expire");
CREATE INDEX IF NOT EXISTS "session_tokens_link_id_idx" ON "session_tokens" ("link_id");
CREATE INDEX IF NOT EXISTS "session_tokens_expires_at_idx" ON "session_tokens" ("expires_at");
CREATE INDEX IF NOT EXISTS "chat_messages_session_id_idx" ON "chat_messages" ("session_id");
CREATE INDEX IF NOT EXISTS "chat_messages_created_at_idx" ON "chat_messages" ("created_at");
CREATE INDEX IF NOT EXISTS "chat_participants_session_id_idx" ON "chat_participants" ("session_id");
CREATE INDEX IF NOT EXISTS "chat_participants_is_online_idx" ON "chat_participants" ("is_online");

-- Verify schema is complete
SELECT 
    'Production Database v2.0 Fix Complete' as status,
    COUNT(*) as total_tables
FROM information_schema.tables 
WHERE table_schema = 'public';

\echo 'Production database successfully updated to Virtual Audience Platform v2.0 schema';