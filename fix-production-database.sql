-- Fix Production Database Script
-- Run this to ensure all tables exist in production Docker database

-- Create ENUM types if they don't exist
DO $$ BEGIN
    CREATE TYPE user_role AS ENUM ('admin', 'engineer', 'user');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE message_type AS ENUM ('individual', 'broadcast', 'system');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create session table if it doesn't exist
CREATE TABLE IF NOT EXISTS "session" (
    "sid" varchar PRIMARY KEY NOT NULL,
    "sess" jsonb NOT NULL,
    "expire" timestamp NOT NULL
);

-- Create users table if it doesn't exist
CREATE TABLE IF NOT EXISTS "users" (
    "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "username" varchar(50) NOT NULL,
    "password" text NOT NULL,
    "email" varchar(100),
    "role" user_role DEFAULT 'user' NOT NULL,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "updated_at" timestamp DEFAULT now() NOT NULL,
    CONSTRAINT "users_username_unique" UNIQUE("username")
);

-- Create all other tables if they don't exist
CREATE TABLE IF NOT EXISTS "generated_links" (
    "id" text PRIMARY KEY NOT NULL,
    "stream_name" text NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "url" text NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

CREATE TABLE IF NOT EXISTS "short_links" (
    "id" text PRIMARY KEY NOT NULL,
    "stream_name" text NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

CREATE TABLE IF NOT EXISTS "viewer_links" (
    "id" text PRIMARY KEY NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "url" text NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

CREATE TABLE IF NOT EXISTS "short_viewer_links" (
    "id" text PRIMARY KEY NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

CREATE TABLE IF NOT EXISTS "session_tokens" (
    "id" text PRIMARY KEY NOT NULL,
    "link_id" text,
    "link_type" text,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp NOT NULL,
    "created_by" integer REFERENCES "users"("id")
);

CREATE TABLE IF NOT EXISTS "chat_messages" (
    "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text NOT NULL,
    "sender_id" integer REFERENCES "users"("id"),
    "sender_name" text NOT NULL,
    "recipient_id" integer REFERENCES "users"("id"),
    "message_type" message_type DEFAULT 'individual' NOT NULL,
    "content" text NOT NULL,
    "created_at" timestamp DEFAULT now() NOT NULL
);

CREATE TABLE IF NOT EXISTS "chat_participants" (
    "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text NOT NULL,
    "user_id" integer REFERENCES "users"("id"),
    "username" text NOT NULL,
    "role" user_role NOT NULL,
    "is_online" boolean DEFAULT true NOT NULL,
    "joined_at" timestamp DEFAULT now() NOT NULL,
    "last_seen_at" timestamp DEFAULT now() NOT NULL
);

-- Create indexes if they don't exist
CREATE INDEX IF NOT EXISTS "IDX_session_expire" ON "session" ("expire");
CREATE INDEX IF NOT EXISTS "users_role_idx" ON "users" ("role");
CREATE INDEX IF NOT EXISTS "generated_links_expires_at_idx" ON "generated_links" ("expires_at");
CREATE INDEX IF NOT EXISTS "chat_messages_session_id_idx" ON "chat_messages" ("session_id");
CREATE INDEX IF NOT EXISTS "chat_participants_session_id_idx" ON "chat_participants" ("session_id");

-- Create default admin user if it doesn't exist
INSERT INTO "users" ("username", "email", "password", "role")
VALUES (
    'admin', 
    'admin@stagelinq.com', 
    'd50f2345138be5a9d2e393d0d35bc3e79b6e0de2ef0fcbb2e6420cbbc637db4e25cfbb47c1e3079f805a84dc9379c559747529728eb0d1c35b92b1b07fb0d68c.2dc356427cd6587959802211b6e98ace', 
    'admin'
)
ON CONFLICT ("username") DO NOTHING;

-- Verify all tables exist
SELECT 'SUCCESS: All required tables exist' as status
WHERE (
    SELECT COUNT(*) FROM information_schema.tables 
    WHERE table_name IN (
        'session', 'users', 'generated_links', 'short_links', 'viewer_links', 
        'short_viewer_links', 'session_tokens', 'chat_messages', 'chat_participants'
    )
) = 9;