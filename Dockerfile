# Virtual Audience Platform v2.0 - Production Docker Build with Guest User Fixes
FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --include=dev

COPY . .
# Build with latest guest user fixes (null user_id for guests)
RUN npx vite build && npx esbuild server/production.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --allow-overwrite

# Production stage
FROM node:18-alpine AS production

# Install PostgreSQL client and dumb-init
RUN apk add --no-cache dumb-init postgresql-client

WORKDIR /app
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Install production dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/shared ./shared

# Create startup script that ensures complete v2.0 database schema
RUN cat > /app/start.sh << 'EOF'
#!/bin/sh
echo "Starting Virtual Audience Platform v2.0..."
sleep 10

# Ensure database has complete v2.0 schema
psql "$DATABASE_URL" << 'SCHEMA_EOF'
-- Create enums safely
DO $$ BEGIN
    CREATE TYPE user_role AS ENUM ('admin', 'engineer', 'user');
EXCEPTION WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE message_type AS ENUM ('individual', 'broadcast', 'system');
EXCEPTION WHEN duplicate_object THEN null;
END $$;

-- Create session table for authentication
CREATE TABLE IF NOT EXISTS "session" (
    "sid" varchar PRIMARY KEY NOT NULL,
    "sess" jsonb NOT NULL,
    "expire" timestamp NOT NULL
);

-- Create users table
CREATE TABLE IF NOT EXISTS "users" (
    "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "username" varchar(50) NOT NULL,
    "password" text NOT NULL,
    "email" varchar(100),
    "role" user_role DEFAULT 'user' NOT NULL,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "updated_at" timestamp DEFAULT now() NOT NULL,
    CONSTRAINT "users_username_unique" UNIQUE("username")
);

-- Create generated_links table
CREATE TABLE IF NOT EXISTS "generated_links" (
    "id" text PRIMARY KEY NOT NULL,
    "stream_name" text NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "url" text NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

-- Create viewer_links table
CREATE TABLE IF NOT EXISTS "viewer_links" (
    "id" text PRIMARY KEY NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "url" text NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

-- Create short_links table
CREATE TABLE IF NOT EXISTS "short_links" (
    "id" text PRIMARY KEY NOT NULL,
    "stream_name" text NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

-- Create short_viewer_links table
CREATE TABLE IF NOT EXISTS "short_viewer_links" (
    "id" text PRIMARY KEY NOT NULL,
    "return_feed" text NOT NULL,
    "chat_enabled" boolean DEFAULT false NOT NULL,
    "session_token" text UNIQUE,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp,
    "created_by" integer REFERENCES "users"("id")
);

-- Create session_tokens table
CREATE TABLE IF NOT EXISTS "session_tokens" (
    "id" text PRIMARY KEY NOT NULL,
    "link_id" text,
    "link_type" text,
    "created_at" timestamp DEFAULT now() NOT NULL,
    "expires_at" timestamp NOT NULL,
    "created_by" integer REFERENCES "users"("id")
);

-- Create chat_messages table
CREATE TABLE IF NOT EXISTS "chat_messages" (
    "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text NOT NULL,
    "sender_id" integer REFERENCES "users"("id"),
    "sender_name" text NOT NULL,
    "recipient_id" integer REFERENCES "users"("id"),
    "message_type" message_type DEFAULT 'individual' NOT NULL,
    "content" text NOT NULL,
    "created_at" timestamp DEFAULT now() NOT NULL
);

-- Create chat_participants table (user_id nullable for guest users)
CREATE TABLE IF NOT EXISTS "chat_participants" (
    "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text NOT NULL,
    "user_id" integer REFERENCES "users"("id"),
    "username" text NOT NULL,
    "role" user_role NOT NULL,
    "is_online" boolean DEFAULT true NOT NULL,
    "joined_at" timestamp DEFAULT now() NOT NULL,
    "last_seen_at" timestamp DEFAULT now() NOT NULL
);

-- Create all indexes
CREATE INDEX IF NOT EXISTS "IDX_session_expire" ON "session" ("expire");
CREATE INDEX IF NOT EXISTS "session_tokens_link_id_idx" ON "session_tokens" ("link_id");
CREATE INDEX IF NOT EXISTS "session_tokens_expires_at_idx" ON "session_tokens" ("expires_at");
CREATE INDEX IF NOT EXISTS "chat_messages_session_id_idx" ON "chat_messages" ("session_id");
CREATE INDEX IF NOT EXISTS "chat_messages_created_at_idx" ON "chat_messages" ("created_at");
CREATE INDEX IF NOT EXISTS "chat_participants_session_id_idx" ON "chat_participants" ("session_id");
CREATE INDEX IF NOT EXISTS "chat_participants_is_online_idx" ON "chat_participants" ("is_online");

-- Create admin user if not exists
INSERT INTO "users" ("username", "email", "password", "role")
VALUES ('admin', 'admin@stagelinq.com', 'd50f2345138be5a9d2e393d0d35bc3e79b6e0de2ef0fcbb2e6420cbbc637db4e25cfbb47c1e3079f805a84dc9379c559747529728eb0d1c35b92b1b07fb0d68c.2dc356427cd6587959802211b6e98ace', 'admin')
ON CONFLICT ("username") DO NOTHING;

SCHEMA_EOF

echo "Virtual Audience Platform v2.0 database schema ready"
echo "Guest user fixes applied - using null user_id for guests"
echo "Starting application server..."
exec node dist/production.js
EOF

RUN chmod +x /app/start.sh && chown nodejs:nodejs /app/start.sh

USER nodejs
EXPOSE 5000

ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/app/start.sh"]